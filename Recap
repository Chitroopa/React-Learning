Why React
-The virtual browser (vs DOM api)
-"Just javascript"
-React Native 
-Battle-tested
-Declarative languauage (model UI and state)

Components 
-Like functions
-input: props,state| output :UI
-reusable and composable
-<component />
-can manage a private state

Reactive updates 
- React will react 
- Take updates to the browser

Virtual views in the memory
-Generate HTML using JavaScript
-No HTML template language
-Tree reconciliation

https://jscomplete.com/playground/rgs1.1

return <div>"Hello word"</div> --> is jsx
jsx->babel compiler -> browser
play with babel here
babeljs.io -> try it out

- use Map/filter/reduce instead of for/while





React Hooks contribute to Page life cycle event and state management
-Commonly used React hooks
  -useState 
  -useRef
  -useEffect
-What is state?
  The idea is when the user see someting new on the screen its tracked as a state. Its a two way data binding.
-useState syntax
  ex: Whenever the user types in a input box. Each and every character entered is creating a event and that event repalces the current value of the state. both old state and new states are maintained so its easy for debugging and development. 
  const [variableName, setterForTheVariableName] = useState(intialValue)
  ex const[isLoading, setIsLoading] = useState(True)
- useEffect
  Allows to do things after the component renders as well as component unmounts
  useEffect syntax
  useEffect(() => {fuction that executes after the components are rendered completely for the first time}, [dependency array])
  useEffect(()={some functions)}, []) //Empty dependency array means- only execute the functions for the first time not after the subsequent updates
  dependency array - used for component optimization 
  uesEffect is only called when there is change in the dependency array variables or elements 
 -useRef
  primarily to allow access directly to an element in the DOM
-useReducer() -often used to update multiple state values in one call 
  const[varible_name, setter]= useReducer(action, intial_value)  
